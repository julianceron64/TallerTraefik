version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app_net
    labels:
      - "traefik.enable=true"
      # Dashboard protegido con auth básica
      - "traefik.http.routers.traefik.rule=Host(`Gardevoir.localhost`)"
      - "traefik.http.routers.traefik.rule=Host(`Ninetales.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=ops-auth"
      - "traefik.http.middlewares.ops-auth.basicauth.users=admin:{SHA}0DPiKuNIrrVmD8IUCuw1hQxNqZc="

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - neo4j
    environment:
      - EXPRESS_PORT=3000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
    networks:
      - app_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app_net"
      - "traefik.http.routers.api.rule=Host(`charizard.localhost`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
      - "traefik.http.routers.api.middlewares=api-ratelimit"
      # RateLimit: máx. 5 req/s por cliente
      - "traefik.http.middlewares.api-ratelimit.ratelimit.average=5"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=10"

  neo4j:
    image: neo4j:5.25.1
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/password
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
